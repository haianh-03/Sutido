// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sutido.Model;

#nullable disable

namespace Sutido.Model.Migrations
{
    [DbContext(typeof(SutidoProjectContext))]
    [Migration("20251008134031_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sutido.Model.Entites.Ad", b =>
                {
                    b.Property<long>("AdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdId"));

                    b.Property<string>("AdType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdvertiserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AdId")
                        .HasName("PK__Ad__7130D5AEFD321A04");

                    b.ToTable("Ad", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.AuditLog", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("PerformedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<long>("PerformedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("AuditId")
                        .HasName("PK__AuditLog__A17F2398AB6621E4");

                    b.HasIndex("PerformedByUserId");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.BankAccount", b =>
                {
                    b.Property<long>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BankAccountId"));

                    b.Property<string>("AccountHolder")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("BankAccountId")
                        .HasName("PK__BankAcco__4FC8E4A11448D1FB");

                    b.HasIndex("UserId");

                    b.ToTable("BankAccount", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Booking", b =>
                {
                    b.Property<long>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BookingId"));

                    b.Property<string>("AgreedDays")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("AgreedPricePerSession")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("AgreedTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<long>("ChatRoomId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("SecurityCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SessionsPerWeek")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__73951AED7A9AD38C");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.ChatRoom", b =>
                {
                    b.Property<long>("ChatRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ChatRoomId"));

                    b.Property<string>("CancelReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("ConfirmedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<long?>("ParentDepositTransactionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ParentDeposited")
                        .HasColumnType("bit");

                    b.Property<long>("ParentPostId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParentUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("RuleAcceptedByParent")
                        .HasColumnType("bit");

                    b.Property<bool>("RuleAcceptedByTutor")
                        .HasColumnType("bit");

                    b.Property<long?>("TutorDepositTransactionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TutorDeposited")
                        .HasColumnType("bit");

                    b.Property<long>("TutorPostId")
                        .HasColumnType("bigint");

                    b.Property<long>("TutorUserId")
                        .HasColumnType("bigint");

                    b.HasKey("ChatRoomId")
                        .HasName("PK__ChatRoom__69733CF7FB8D3EC9");

                    b.HasIndex("ParentPostId");

                    b.HasIndex("ParentUserId");

                    b.HasIndex("TutorPostId");

                    b.HasIndex("TutorUserId");

                    b.ToTable("ChatRoom", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Document", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DocumentId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("OwnerUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DocumentId")
                        .HasName("PK__Document__1ABEEF0F1ECA779B");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.MarketplaceItem", b =>
                {
                    b.Property<long>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ItemId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("PushPriority")
                        .HasColumnType("bit");

                    b.Property<long>("SellerUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ItemId")
                        .HasName("PK__Marketpl__727E838B0456B75A");

                    b.HasIndex("SellerUserId");

                    b.ToTable("MarketplaceItem", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Point", b =>
                {
                    b.Property<long>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PointId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("PointId")
                        .HasName("PK__Point__40A977E16D9C2789");

                    b.HasIndex("UserId");

                    b.ToTable("Point", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.PointTransaction", b =>
                {
                    b.Property<long>("PointTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PointTransactionId"));

                    b.Property<int>("ChangeAmount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<long>("PointId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ReferralId")
                        .HasColumnType("bigint");

                    b.HasKey("PointTransactionId")
                        .HasName("PK__PointTra__4D5BCB7FCB6543CB");

                    b.HasIndex("PointId");

                    b.HasIndex("ReferralId");

                    b.ToTable("PointTransaction", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PostId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<long>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreferredDays")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PreferredTime")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("PricePerSession")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SessionsPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("StudentGrade")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PostId")
                        .HasName("PK__Post__AA1260180B04E4DB");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Referral", b =>
                {
                    b.Property<long>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReferralId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("ReferredEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("ReferredUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReferrerUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RewardPoints")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("ReferralId")
                        .HasName("PK__Referral__A2C4A9665A0FDCD4");

                    b.HasIndex("ReferredUserId");

                    b.HasIndex("ReferrerUserId");

                    b.ToTable("Referral", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Review", b =>
                {
                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReviewId"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<long>("ToUserId")
                        .HasColumnType("bigint");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__74BC79CEC2B04C07");

                    b.HasIndex("BookingId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE1AD1258896");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Subscription", b =>
                {
                    b.Property<long>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubscriptionId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__Subscrip__9A2B249DAF80ACF1");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Tracking", b =>
                {
                    b.Property<long>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TrackingId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("ActionAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SecurityCodeUsed")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TutorUserId")
                        .HasColumnType("bigint");

                    b.HasKey("TrackingId")
                        .HasName("PK__Tracking__3C19EDF1CC090E74");

                    b.HasIndex("BookingId");

                    b.HasIndex("TutorUserId");

                    b.ToTable("Tracking", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.TutorProfile", b =>
                {
                    b.Property<long>("TutorProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TutorProfileId"));

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Education")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("TutorProfileId")
                        .HasName("PK__TutorPro__CE969F683A55E287");

                    b.HasIndex("UserId");

                    b.ToTable("TutorProfile", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CC4CB21C8C24");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__User__A9D105349C379654")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Verification", b =>
                {
                    b.Property<long>("VerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VerificationId"));

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("ReviewedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ReviewedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTimeOffset>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("VerificationId")
                        .HasName("PK__Verifica__306D490753D10F80");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Verification", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Voucher", b =>
                {
                    b.Property<long>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VoucherId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MaxDiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("MinOrderAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.HasKey("VoucherId")
                        .HasName("PK__Voucher__3AEE7921F0C88711");

                    b.HasIndex(new[] { "Code" }, "UQ__Voucher__A25C5AA7899263F3")
                        .IsUnique();

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.VoucherUsage", b =>
                {
                    b.Property<long>("VoucherUsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VoucherUsageId"));

                    b.Property<DateTimeOffset>("UsedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("VoucherId")
                        .HasColumnType("bigint");

                    b.Property<long>("WalletTransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("VoucherUsageId")
                        .HasName("PK__VoucherU__4264F80B3C601F66");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.HasIndex("WalletTransactionId");

                    b.ToTable("VoucherUsage", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.Wallet", b =>
                {
                    b.Property<long>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("WalletId")
                        .HasName("PK__Wallet__84D4F90E94E5E2C5");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.WalletExternalTransaction", b =>
                {
                    b.Property<long>("ExternalTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ExternalTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("BankAccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("ExternalTransactionId")
                        .HasName("PK__WalletEx__535E5F63F3B48CEE");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletExternalTransaction", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.WalletTransaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RelatedEntity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("RelatedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<long?>("ToUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("TransactionId")
                        .HasName("PK__WalletTr__55433A6B2E6FB6B7");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransaction", (string)null);
                });

            modelBuilder.Entity("Sutido.Model.Entites.AuditLog", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "PerformedByUser")
                        .WithMany("AuditLogs")
                        .HasForeignKey("PerformedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK__AuditLog__Perfor__2DE6D218");

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("Sutido.Model.Entites.BankAccount", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__BankAccou__UserI__3F466844");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Booking", b =>
                {
                    b.HasOne("Sutido.Model.Entites.ChatRoom", "ChatRoom")
                        .WithMany("Bookings")
                        .HasForeignKey("ChatRoomId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__ChatRoo__6A30C649");

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("Sutido.Model.Entites.ChatRoom", b =>
                {
                    b.HasOne("Sutido.Model.Entites.Post", "ParentPost")
                        .WithMany("ChatRoomParentPosts")
                        .HasForeignKey("ParentPostId")
                        .IsRequired()
                        .HasConstraintName("FK__ChatRoom__Parent__5DCAEF64");

                    b.HasOne("Sutido.Model.Entites.User", "ParentUser")
                        .WithMany("ChatRoomParentUsers")
                        .HasForeignKey("ParentUserId")
                        .IsRequired()
                        .HasConstraintName("FK__ChatRoom__Parent__5FB337D6");

                    b.HasOne("Sutido.Model.Entites.Post", "TutorPost")
                        .WithMany("ChatRoomTutorPosts")
                        .HasForeignKey("TutorPostId")
                        .IsRequired()
                        .HasConstraintName("FK__ChatRoom__TutorP__5EBF139D");

                    b.HasOne("Sutido.Model.Entites.User", "TutorUser")
                        .WithMany("ChatRoomTutorUsers")
                        .HasForeignKey("TutorUserId")
                        .IsRequired()
                        .HasConstraintName("FK__ChatRoom__TutorU__60A75C0F");

                    b.Navigation("ParentPost");

                    b.Navigation("ParentUser");

                    b.Navigation("TutorPost");

                    b.Navigation("TutorUser");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Document", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "OwnerUser")
                        .WithMany("Documents")
                        .HasForeignKey("OwnerUserId")
                        .IsRequired()
                        .HasConstraintName("FK__Document__OwnerU__797309D9");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Sutido.Model.Entites.MarketplaceItem", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "SellerUser")
                        .WithMany("MarketplaceItems")
                        .HasForeignKey("SellerUserId")
                        .IsRequired()
                        .HasConstraintName("FK__Marketpla__Selle__7D439ABD");

                    b.Navigation("SellerUser");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Point", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "User")
                        .WithMany("Points")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Point__UserId__07C12930");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sutido.Model.Entites.PointTransaction", b =>
                {
                    b.HasOne("Sutido.Model.Entites.Point", "Point")
                        .WithMany("PointTransactions")
                        .HasForeignKey("PointId")
                        .IsRequired()
                        .HasConstraintName("FK__PointTran__Point__123EB7A3");

                    b.HasOne("Sutido.Model.Entites.Referral", "Referral")
                        .WithMany("PointTransactions")
                        .HasForeignKey("ReferralId")
                        .HasConstraintName("FK__PointTran__Refer__1332DBDC");

                    b.Navigation("Point");

                    b.Navigation("Referral");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Post", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "CreatorUser")
                        .WithMany("Posts")
                        .HasForeignKey("CreatorUserId")
                        .IsRequired()
                        .HasConstraintName("FK__Post__CreatorUse__59063A47");

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Referral", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "ReferredUser")
                        .WithMany("ReferralReferredUsers")
                        .HasForeignKey("ReferredUserId")
                        .HasConstraintName("FK__Referral__Referr__0C85DE4D");

                    b.HasOne("Sutido.Model.Entites.User", "ReferrerUser")
                        .WithMany("ReferralReferrerUsers")
                        .HasForeignKey("ReferrerUserId")
                        .IsRequired()
                        .HasConstraintName("FK__Referral__Referr__0B91BA14");

                    b.Navigation("ReferredUser");

                    b.Navigation("ReferrerUser");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Review", b =>
                {
                    b.HasOne("Sutido.Model.Entites.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__BookingI__73BA3083");

                    b.HasOne("Sutido.Model.Entites.User", "FromUser")
                        .WithMany("ReviewFromUsers")
                        .HasForeignKey("FromUserId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__FromUser__74AE54BC");

                    b.HasOne("Sutido.Model.Entites.User", "ToUser")
                        .WithMany("ReviewToUsers")
                        .HasForeignKey("ToUserId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__ToUserId__75A278F5");

                    b.Navigation("Booking");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Subscription", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Subscript__UserI__02FC7413");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Tracking", b =>
                {
                    b.HasOne("Sutido.Model.Entites.Booking", "Booking")
                        .WithMany("Trackings")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Tracking__Bookin__6EF57B66");

                    b.HasOne("Sutido.Model.Entites.User", "TutorUser")
                        .WithMany("Trackings")
                        .HasForeignKey("TutorUserId")
                        .IsRequired()
                        .HasConstraintName("FK__Tracking__TutorU__6FE99F9F");

                    b.Navigation("Booking");

                    b.Navigation("TutorUser");
                });

            modelBuilder.Entity("Sutido.Model.Entites.TutorProfile", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "User")
                        .WithMany("TutorProfiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__TutorProf__UserI__534D60F1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sutido.Model.Entites.User", b =>
                {
                    b.HasOne("Sutido.Model.Entites.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__RoleId__3B75D760");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Verification", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "ReviewedByNavigation")
                        .WithMany("VerificationReviewedByNavigations")
                        .HasForeignKey("ReviewedBy")
                        .HasConstraintName("FK__Verificat__Revie__4F7CD00D");

                    b.HasOne("Sutido.Model.Entites.User", "User")
                        .WithMany("VerificationUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Verificat__UserI__4D94879B");

                    b.Navigation("ReviewedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sutido.Model.Entites.VoucherUsage", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "User")
                        .WithMany("VoucherUsages")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__VoucherUs__UserI__25518C17");

                    b.HasOne("Sutido.Model.Entites.Voucher", "Voucher")
                        .WithMany("VoucherUsages")
                        .HasForeignKey("VoucherId")
                        .IsRequired()
                        .HasConstraintName("FK__VoucherUs__Vouch__245D67DE");

                    b.HasOne("Sutido.Model.Entites.WalletTransaction", "WalletTransaction")
                        .WithMany("VoucherUsages")
                        .HasForeignKey("WalletTransactionId")
                        .IsRequired()
                        .HasConstraintName("FK__VoucherUs__Walle__2645B050");

                    b.Navigation("User");

                    b.Navigation("Voucher");

                    b.Navigation("WalletTransaction");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Wallet", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Wallet__UserId__4316F928");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sutido.Model.Entites.WalletExternalTransaction", b =>
                {
                    b.HasOne("Sutido.Model.Entites.BankAccount", "BankAccount")
                        .WithMany("WalletExternalTransactions")
                        .HasForeignKey("BankAccountId")
                        .IsRequired()
                        .HasConstraintName("FK__WalletExt__BankA__48CFD27E");

                    b.HasOne("Sutido.Model.Entites.Wallet", "Wallet")
                        .WithMany("WalletExternalTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK__WalletExt__Walle__47DBAE45");

                    b.Navigation("BankAccount");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Sutido.Model.Entites.WalletTransaction", b =>
                {
                    b.HasOne("Sutido.Model.Entites.User", "FromUser")
                        .WithMany("WalletTransactionFromUsers")
                        .HasForeignKey("FromUserId")
                        .HasConstraintName("FK__WalletTra__FromU__1DB06A4F");

                    b.HasOne("Sutido.Model.Entites.User", "ToUser")
                        .WithMany("WalletTransactionToUsers")
                        .HasForeignKey("ToUserId")
                        .HasConstraintName("FK__WalletTra__ToUse__1EA48E88");

                    b.HasOne("Sutido.Model.Entites.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK__WalletTra__Walle__1CBC4616");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Sutido.Model.Entites.BankAccount", b =>
                {
                    b.Navigation("WalletExternalTransactions");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Booking", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Trackings");
                });

            modelBuilder.Entity("Sutido.Model.Entites.ChatRoom", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Point", b =>
                {
                    b.Navigation("PointTransactions");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Post", b =>
                {
                    b.Navigation("ChatRoomParentPosts");

                    b.Navigation("ChatRoomTutorPosts");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Referral", b =>
                {
                    b.Navigation("PointTransactions");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Sutido.Model.Entites.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("BankAccounts");

                    b.Navigation("ChatRoomParentUsers");

                    b.Navigation("ChatRoomTutorUsers");

                    b.Navigation("Documents");

                    b.Navigation("MarketplaceItems");

                    b.Navigation("Points");

                    b.Navigation("Posts");

                    b.Navigation("ReferralReferredUsers");

                    b.Navigation("ReferralReferrerUsers");

                    b.Navigation("ReviewFromUsers");

                    b.Navigation("ReviewToUsers");

                    b.Navigation("Subscriptions");

                    b.Navigation("Trackings");

                    b.Navigation("TutorProfiles");

                    b.Navigation("VerificationReviewedByNavigations");

                    b.Navigation("VerificationUsers");

                    b.Navigation("VoucherUsages");

                    b.Navigation("WalletTransactionFromUsers");

                    b.Navigation("WalletTransactionToUsers");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Voucher", b =>
                {
                    b.Navigation("VoucherUsages");
                });

            modelBuilder.Entity("Sutido.Model.Entites.Wallet", b =>
                {
                    b.Navigation("WalletExternalTransactions");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("Sutido.Model.Entites.WalletTransaction", b =>
                {
                    b.Navigation("VoucherUsages");
                });
#pragma warning restore 612, 618
        }
    }
}
